#<type> "." <pattern that is matched> "=" ("@" method | "%" property | "!" class) <template>  "#" <explanation>
class.Robot               = !Robot#A robot, without a world useless.
class.World               = !World#A world for robots.

world.enter               = @enter(robot)#enter(robot:Robot)<br>The robot enters the world. 
world.setstone            = @setStone(x,y,z)#setStone(x:Number, y:Number, z:Number)<br>Places a stone into the world.
world.setstonecolor       = @setStoneColor(color)#setStoneColor(color:Color)<br>Defines the color for new stones.
world.dropstone           = @dropStone(x,y)#dropStone(x:Number, y:Number)<br>Drops a stone onto that field.
world.removestone         = @removeStone(x,y,z)#removeStone(x:Number, y:Number, z:Number)<br>Removes a stone from that position.
world.pickupstone         = @pickupStone(x,y)#pickupStone(x:Number, y:Number)<br>Picks up the top stone ffrom that field.
world.load                = @load(file)#load(file:String)<br>Loads a world created by the world editor.
world.litterstones        = @litterStones(left,top,right,bottom,density)#litterStones(left:Integer,top:Integer,right:Integer,bottom:Integer,density:Real)<br>Litters the rectangle randomly with stones.
world.robots              = $numberOfRobots#numberOfRobots:Number<br>Number of robots.
world.entrances          = $availableEntrances#availableEntrances:Number<br>Number of open entrances for new robots.

robot.stepA               = @step()#step()<br>The robot makes a step forward.
robot.stepB               = @step(nr)#step(nr:Integer)<br>The robot makes multiple steps forward.
robot.stepback            = @stepBack()#stepBack()<br>The robots makes a step backward.
robot.stepleft            = @stepLeft()#stepLeft()<br>The robot makes a left side step. 
robot.stepright           = @stepRight()#stepRight()<br>The robot makes a right side step.
robot.isobstacle          = @isObstacle()#isObstacle():Boolean<br>Checks if there is an obstacle before the robot.
robot.isleftobstacle      = @isLeftObstacle()#isLeftObstacle():Boolean<br>Checks if there is an obstacle left side of the robot.
robot.isrightobstacle     = @isRightObstacle()#isRightObstacle():Boolean<br>Checks if there is an obstacle right side of before the robot.
robot.isbackobstacle      = @isBackObstacle()#isBackObstacle():Boolean<br>Checks if there is an obstacle behind the robot.
robot.flydown             = @flyDown()#flyDown()<br>The robot flies down. 
robot.flyup               = @flyUp()#flyUp()<br>The robot flies up.
robot.flyleft             = @flyLeft()#flyLeft()<br>The robot flies to the left.
robot.flyright            = @flyRight()#flyRight()<br>The robot flies to the right.
robot.flyback             = @flyBack()#flyBack()<br>The robot flies backwards. 
robot.fly                 = @fly()#fly()<br>The robot flies forward.
robot.isfree              = @isFree()#isFree():Boolean<br>Checks if flying forward is possible.
robot.isleftfree          = @isLeftFree()#isLeftFree():Boolean<br>Checks if flying to the left side is possible.
robot.isrightfree         = @isRightFree()#isRightFree():Boolean<br>Checks if flying to the right side is possible.
robot.isbackfree          = @isBackFree()#isBackFree():Boolean<br>Checks if flying backwards is possible.
robot.isupfree            = @isUpFree()#isUpFree():Boolean<br>Checks if flying up is possible.
robot.isdownfree          = @isDownFree()#isDownFree():Boolean<br>Checks if flying down is possible.
robot.turnleft            = @turnLeft()#turnLeft()<br>Turns the robot to the left.
robot.turnright           = @turnRight()#turnRight()<br>Turns the robot to the right.
robot.turnaround          = @turnAround()#turnAround()<br>Turns the robot around.
robot.drop                = @drop()#drop()<br>The robot drops a stone on the column in front of her.
robot.stonecolor          = @stoneColor():stoneColor():Color<br>The robot delivers the color of the stone in front of her.
robot.pickupA             = @pickup()#pickup()<br>The robot picks up a stone of the column in front of her.
robot.pickupB             = @pickup(nr)#pickup(nr:Integer)<br>The robot picks up a number of stones.
robot.placestone          = @placeStone(n)#placeStone(n:Integer)<br>The robot places a stone relative to her feet + n.
robot.removestone         = @removeStone(n)#removeStone(n:Integer)<br>The robot removes a stone relative to her feet + n.
robot.setstonecolor       = @setStoneColor(color)#setStoneColor(color:Color)<br>Defines the color of new stones.
robot.stonecolor          = @stoneColor()#stoneColor():Color<br>Returns the color of the stone in front of the robot.
robot.setmark             = @setMark()#setMark()<br>Marks the field of the robot.
robot.removemark          = @removeMark()#removeMark()<br>Removes a mark from the field of the robot.
robot.ismarked            = @isMarked()#isMarked():Boolean<br>Checks if the field of the robot is marked.
robot.isstoneA            = @isStone()#isStone():Boolean<br>Checks if there is at least one stone in front of the robot.
robot.isstoneB            = @isStone(nr)#isStone(nr:Integer):Boolean<br>Checks if there is a number of stones in front of the robot.
robot.issouth             = @isSouth()#isSouth():Boolean<br>Checks if the robot is facing south.
robot.iswest              = @isWest()#isWest():Boolean<br>Checks if the robot is facing west.
robot.isnorth             = @isNorth()#isNorth():Boolean<br>Checks if the robot is facing north.
robot.iseast              = @isEast()#isEast():Boolean<br>Checks if the robot is facing east.
robot.robotColor          = $robotColor#robotColor:Color<br>Color of the robot.
robot.direction           = $direction#direction:Direction<br>Facing direction of the robot.  
robot.stonecolor          = $stonecolor#stonecolor:Color<br>Color for new stones.
robot.x                   = $x#x:Number<br>x-Coordinate of the robot.
robot.y                   = $y#y:Number<br>y-Coordinate of the robot.
robot.z                   = $z#z:Number<br>z-Coordinate of the robot.
