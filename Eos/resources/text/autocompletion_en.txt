#<type> "." <pattern that is matched> "=" ("@" method | "%" property | "!" class | "$" private property) <template>  "#" <explanation>
class.Boolean             = !Boolean#A logical value.
class.Color               = !Color#A Color.
class.Real                = !Real#A floating point number. 
class.Integer             = !Integer#A whole number.
class.Triangle            = !Triangle#A triangle.
class.Textfield           = !Textfield#A rectangle with label.
class.Grafic              = !Grafic#A rectangle with image.
class.Square              = !Square#A square.
class.Rectangle           = !Rectangle#A rectangle.
class.String              = !String#A text.
class.Plotter             = !Plotter#A steerable drawing pen.
class.Line                = !Line#A line.
class.Group               = !Group#A group of many figures.
class.Ellipse             = !Ellipse#An ellipse.
class.Circle              = !Circle#A circle.
class.Window              = !Window#A window.

triangle.setcorners       = @setCorners(x1,y1,x2,y2,x3,y3)#setCorners(x1:Number,y1:Number,x2:Number,y2:Number,x3:Number,y3:Number)<br>Sets all three corners of the triangle.
triangle.mirrorx          = @mirrorX()#mirrorX()<br>Mirrors the triangle at the y axis.
triangle.mirrory          = @mirrorY()#mirrorY()<br>Mirrors the triangle at the x axis.
triangle.a                   = $a#a:Point<br>Vertice of the triangle.
triangle.b                   = $b#b:Point<br>Vertice of the triangle.
triangle.c                   = $c#c:Point<br>Vertice of the triangle.

ellipse.setcentery          = @setCenterY(y)#setCenterY(y:Number)<br>Sets the y-coordinate of the center.
ellipse.setcenterx          = @setCenterX(x)#cetCenterX(x:Number)<br>Sets the x-xoordinate of the center.
ellipse.setradiusy          = @setRadiusY(y)#setRadiusY(y:Number)<br>Sets the vertical radius.
ellipse.setradiusx          = @setRadiusX(x)#setRadiusX(x:Number)<br>Sets the horizontal radius.
ellipse.setcenter           = @setCenter(x,y)#setCenter(x:Number,y:Number)<br>Sets the center point.
ellipse.getcentery          = @getCenterY()#getCenterY():Number<br>Returns the y-coordinate of the center point.
ellipse.getcenterx          = @getCenterX()#getCenterX():Number<br>Returns the x-coordinate of the center point.
ellipse.getradiusy          = @getRadiusY()#getRadiusY():Number<br>Returns the vertical radius.
ellipse.getradiusx          = @getRadiusX()#getRadiusX():Number<br>Returns the horizontal radius.
ellipse.centerx             = %centerX#centerX:Number<br>The x-coordinate of the center point.
ellipse.centery             = %centerY#centerY:Number<br>The y-coordinate of the center point.
ellipse.radiusx             = %radiusX#radiusX:Number<br>The horizontal radius of the ellipse.
ellipse.radiusy             = %radiusY#radiusY:Number<br>The vertical radius of the ellipse.

window.setgridcolor       = @setGridColor(color)#setGridColor(color:Color)<br>Sets the color of the coordinate grid.
window.setbackgroundcolor = @setBackgroundColor(color)#setBackgroundColor(color:Color)<br>Sets the background color.
window.setheight          = @setHeight(height)#setHeight(height:Number)<br>Sets the height of the window.
window.setwidth           = @setWidth(width)#setWidth(width:Number)<br>Sets the width of the window.
window.settop             = @setTop(top)#setTop(top:Number)<br>Sets the distance to the upper screen border.
window.setleft            = @setLeft(left)#setLeft(left:Number)<br>Sets the distance to the left screen border.
window.setzoom            = @setZoom(zoom)#setZoom(zoom:Number)<br>Sets the zoom factor.
window.setcenter          = @setCenter(x,y)#setCenter(x:Number,y:Number)<br>Sets the center of the coordinate system.
window.setname            = @setName(name)#setName(name:String)<br>Sets the title of the window.
window.setgridwidth       = @setGridWidth(distance)#setGridWidth(distance:Number)<br>Sets the grid width of the coordinate system.
window.move               = @move(dx,dy)#move(dx:Number,dy:Number)<br>Moves the window.
window.gridon             = @gridOn()#gridOn()<br>Shows the coordinate system.
window.gridoff            = @gridOff()#gridOff()<br>Hide the coordinate system.
window.getgridcolor       = @getGridColor()#getGridColor():Color<br>Returns the grid color of the coordinate system.
window.getbackgroundcolor = @getBackgroundColor()#getBackgroundColor():Color<br>Returns the color of the background.
window.getheight          = @getHeight()#getHeight():Number<br>Returns the height of the window.
window.getwidth           = @getWidth()#getWidth():Number<br>Return the width of the window.
window.gettop             = @getTop()#getTop():Number<br>Returns the distance to the upper screen border.
window.getleft            = @getLeft()#getLeft():Number<br>Returns the distance to the left screen border.
window.getname            = @getName()#getName():String<br>Returns the title of the window.
window.getgridwidth       = @getGridWidth()#getGridWidth():Number<br>Returns the grid width of the coordinate system.
window.draw               = @draw(figure)#draw(figure:Figure)<br>Adds a figure to that window.
window.gridcolor          = %gridColor#gridColor:Color<br>The color of the coordinate grid.
window.backgroundcolor    = %backgroundcolor#backgroundcolor:Color<br>The background color of the window.
window.height             = %height#height:Number<br>The height of the window.
window.width              = %width#width:Number<br>The width of the window.
window.top                = %top#top:Number<br>The distance between the window and the upper screen border.
window.left               = %left#left:Number<br>The distance between the window and the left screen border.
window.name               = %name#name:String<br>The title of the window.
window.gridwidth          = %gridwidth#gridwidth:Number<br>The grid width of the coordinate system.
window.gridvisible        = $gridvisible#gridvisible:Boolean<br>Is the grid visible?

figure.move               = @move(dx,dy)#move(dx:Number,dy:Number)<br>Moves the figure.
figure.stretch            = @stretch(factor)#stretch(factor:Number)<br>Stretches the figure.
figure.moveto             = @moveTo(x,y)#moveTo(x:Number,y:Number)<br>Moves the center of this figure to the position.
figure.rotate             = @rotate(angle)#rotate(angle:Number)<br>Rotates the figure counterclockwise.
figure.rotatearound       = @rotateAround(x,y,angle)#rotateAround(x:Number,y:Number,angle:Number)<br>Rotates the figure counterclockwise around the point (x,y).
figure.stretchat          = @stretchAt(x,y,factor)#stretchAt(x:Number,y:Number,factor:Number)<br>Stretches the figure with the center (x,y).
figure.getvisible         = @getVisible()#getVisible():Boolean<br>Returns if the figure is visible.
figure.setvisible         = @setVisible(visible)#setVisible(visible:Boolean)<br>Sets the visibility of this figure.
figure.setx               = @setX(x)#setX(x:Number)<br>Sets the x coordinate of the center of this figure.
figure.getx               = @getX()#getX():Number<br>Returns the x coordinate of the center of this figure.
figure.sety               = @setY(y)#setY(y:Number)<br>Sets the y coordinate of the center of this figure.
figure.gety               = @getY()#getY():Number<br>Returns the y coordinate of the center of this figure.
figure.visible            = %visible#visible:Boolean<br>Is the figure visible? 
figure.x                  = %x#x:Number<br>The x coordinate of the center of this figure.
figure.y                  = %y#y:Number<br>the y coordinate of the center of this figure.
figure.angle               = $angle#angle:Number<br>The figure is turned for that angle.
figure.mirrored            = $mirrored#mirrored:Number<br>Is the figure mirrored?

filledfigure.setfillstyle   = @setFillStyle(style)#setFillStyle(style:FillStyle)<br>Sets the style used to fill the figure.
filledfigure.setfillcolor   = @setFillColor(color)#setFillColor(color:Color)<br>Sets the color used to fill the figure.
filledfigure.getfillstyle   = @getFillStyle()#getFillStyle():FillStyle<br>Returns the fill style of this figure.
filledfigure.getfillcolor   = @getFillColor()#getFillColor():Color<br>Returns the fill color of this figure.
filledfigure.fillstyle      = %fillstyle#fillstyle:FillStyle<br>Fill style of this figure.
filledfigure.fillcolor      = %fillcolor#fillcolor:Color<br>Fill color of this figure.

group.setbordercolor       = @setBorderColor(color)#setBorderColor(color:Color)<br>Sets the color of the border of all figures in this group.
group.setborderstyle       = @setBorderStyle(style)#setBorderStyle(style:LineStyle)<br>Sets the border style of all figures in this group.
group.setborderwidth       = @setBorderWidth(width)#setBorderWidth(width:Number)<br>Sets the border width of all figures in this group.
group.setfillstyle         = @setFillStyle(style)#setFillStyle(style:FillStyle)<br>Sets the fill style of all figures in this group.
group.setfillcolor         = @setFillColor(color)#setFillColor(color:Color)<br>Sets the fill color of all figures in this group.
group.consume              = @consume(figure)#consume(figure:Figure)<br>Add a figure to this group.
group.setCenter            = @setCenter(x,y)#setCenter(x:Number,y:Number)<br>Sets the center of this group to a new point without moving the group. This point will replace the balance point as center for rotations and similar operations.
group.copy                 = @copy(figure)#copy(figure:Figure)<br>Adds a copy of the figure to this group.
group.mirrorx              = @mirrorX()#mirrorX()<br>Mirrors the group at the y axis.
group.mirrory              = @mirrorY()#mirrorY()<br>Mirrors the group at the x axis.
group.autocenter           = $autocenter#autocenter:Boolean<br>Will that group automatically choose the balance point as center?
group.members              = $members#members:Number<br>Number of members in that group.

circle.setcentery          = @setCenterY(y)#setCenterY(y:Number)<br>Sets the y coordinate of the center.
circle.setcenterx          = @setCenterX(x)#setCenterX(x:Number)<br>Sets the x coordinate of the center.
circle.setradius           = @setRadius(radius)#setRadius(radius:Number)<br>Sets the radius.
circle.setcenter           = @setCenter(x,y)#setCenter(x:Number,y:Number)<br>Sets the center of this circle.
circle.getcentery          = @getCenterY()#getCenterY():Number<br>Returns the y coordinate of the center.
circle.getcenterx          = @getCenterX()#getCenterX():Number<br>Returns the x coordinate of the center.
circle.getradius           = @getRadius()#getRadius():Number<br>Returns the radius of this cricle.
circle.centerx             = %centerX#centerX:Number<br>x coordinate of the center of this circle.
circle.centery             = %centerY#centerY:Number<br>y coordinate of the center of this circle.
circle.radius              = %radius#radius:Number<br>Radius of thsi circle.

line.setpoint1        = @setPoint1(x,y)#setPoint1(x:Number,y:Number)<br>Sets the first point.
line.setpoint2        = @setPoint2(x,y)#setPoint2(x:Number,y:Number)<br>Sets the second point.
line.setpoints        = @setPoints(x1,y1,x2,y2)#setPoints(x1:Number,y1:Number,x2:Number,y2:Number)<br>Sets both points of the line.
line.setlinestyle     = @setLineStyle(style)#setLineStyle(style:LineStyle)<br>Sets the style of the line.
line.getlinestyle     = @getLineStyle()#getLineStyle():LineStyle<br>Returns the style of the line.
line.setlinewidth     = @setLineWidth(width)#setLineWidth(width:Number)<br>Sets the width of the line.
line.getlinewidth     = @getLineWidth()#getLineWidth():Number<br>Returns the width of the line.
line.setx1            = @setX1(x)#setX1(x:Number)<br>Sets the x coordinate of the first point.
line.getx1            = @getX1()#getX1():Number<br>Return the x coordinate of the first point.
line.setx2            = @setX2(x)#setX2(x:Number)<br>Sets the x coordinate of the second point.
line.getx2            = @getX2()#getX2():Number<br>Return the x coordinate of the second point.
line.sety1            = @setY1(x)#setY1(y:Number)<br>Sets the y coordinate of the first point.
line.gety1            = @getY1()#getY1():Number<br>Return the y coordinate of the first point.
line.sety2            = @setY2(y)#setY2(y:Number)<br>Sets the y coordinate of the second point.
line.gety2            = @getY2()#getY2():Number<br>Return the y coordinate of the second point.
line.setcolor         = @setColor(color)#setColor(color:Color)<br>Sets the color of this line.
line.getcolor         = @getColor()#getColor():Color<br>Returns the color of this line.
line.linewidth        = %linewidth#linewidth:Number<br>Width of the line.
line.linestyle        = %linestyle#linestyle:LineStyle<br>Style of the line.
line.linecolor        = %linecolor#linecolor:Color<br>Color of the line.
line.x1               = %x1#x1:Number<br>x coordinate of the first point.
line.y1               = %y1#y1:Number<br>y coordinate of the first point.
line.x2               = %x2#x2:Number<br>x coordinate of the second point.
line.y2               = %y2#y2:Number<br>y coordinate of the second point.

square.setside        = @setSide(length)#setSide(length:Number)<br>Sets the length of the side.
square.setlefttop     = @setTopLeft(x,y)#setTopLeft(x:Number,y:Number)<br>Sets teh coordinates of the top left corner.
square.getside        = @getSide()#getSide():Number<br>Returns the length of the side.
square.side           = %side#side:Number<br>Length of the side of this square.

rectangle.setheight      = @setHeight(height)#setHeight(height:Number)<br>Sets the height.
rectangle.setwidth       = @setWidth(width)#setWidth(width:Number)<br>Sets the width.
rectangle.setleft        = @setLeft(left)#setLeft(left:Number)<br>Sets the left border.
rectangle.setright       = @setRight(right)#setRight(right:Number)<br>Sets the right border.
rectangle.settop         = @setTop(top)#setTop(top:Number)<br>Sets the upper border.
rectangle.setbottom      = @setBottom(bottom)#setBottom(bottom:Number)<br>Sets the lower border.
rectangle.setlefttop     = @setLeftTop(left, top)#setLeftTop(left:Number, top:Number)<br>Sets the upper left corner.
rectangle.setrightbottom = @setRightBottom(right, bottom)#setRightBottom(right:Number, bottom:Number)<br>Sets the lower right corner.
rectangle.setcorners     = @setCorners(left, top, right, bottom)#setCorners(left:Number, top:Number, right:Number, bottom:Number)<br>Configures all four borders.
rectangle.getheight      = @getHeight()#getHeight():Number<br>Returns the height.
rectangle.getwidth       = @getWidth()#getWidth():Number<br>Returns the width.
rectangle.getleft        = @getLeft()#getLeft():Number<br>Returns the left border.
rectangle.getright       = @getRight()#getRight():Number<br>Returns the right border.
rectangle.gettop         = @getTop()#getTop():Number<br>Returns the upper border.
rectangle.getbottom      = @getBottom()#getBottom():Number<br>Returns the lower border.
rectangle.height         = %height#height:Number<br>Height of this rectangle.
rectangle.width          = %width#width:Number<br>Width of this rectangle.
rectangle.top            = %top#top:Number<br>Top border of this rectangle.
rectangle.left           = %left#left:Number<br>left border of this rectangle.
rectangle.bottom         = %bottom#bottom:Number<br>Lower border of this rectangle.
rectangle.right          = %right#right:Number<br>Right border of this rectangle.

linefigure.setbordercolor = @setBorderColor(color)#setBorderColor(color:Color)<br>Sets color of the border line.
linefigure.setborderstyle = @setBorderStyle(style)#setBorderStyle(style:BorderStyle)<br>Sets the line style of the border line.
linefigure.setborderwidth = @setBorderWidth(width)#setBorderWidth(width:Number)<br>Sets the width of the border line.
linefigure.getbordercolor = @getBorderColor()#getBorderColor():Color<br>Returns the color of the border line.
linefigure.getborderstyle = @getBorderStyle()#getBorderStyle():BorderStyle<br>Returns the linestyle of the border line.
linefigure.getborderwidth = @getBorderWidth()#getBorderWidth():Number<br>Returns the width of the border line.
linefigure.bordercolor    = %borderColor#borderColor:Color<br>Color of the border line.
linefigure.borderstyle    = %borderStyle#borderStyle:BorderStyle<br>Linestyle of the border line.
linefigure.borderwidth    = %borderWidth#borderWidth:Number<br>Width of the border line.

textfield.settextcolor           = @setTextColor(color)#setTextColor(color:Color)<br>Sets the color of the text.
textfield.settextsize            = @setTextSize(size)#setTextSize(size:Number)<br>Sets the size of the font of the text.
textfield.setfont                = @setFont(font)#setFont(font:String)<br>Sets the font of the text.
textfield.setalignmentvertical   = @setAlignmentVertical(alignment)#setAlignmentVertical(alignment:Alignment)<br>Sets the vertical alignment.
textfield.setautoadjustsize      = @setAutoAdjustSize(auto)#setAutoAdjustSize(auto:Boolean)<br>Determines if the rectangle is automatically adjusted to it's content.
textfield.setalignmenthorizontal = @setAlignmentHorizontal(alignment)#setAlignmentHorizontal(alignment:Alignment)<br>Sets the norizontal alignment.
textfield.appendline             = @appendLine(line)#appendLine(line:String)<br>Appends a new line.
textfield.deleteline             = @deleteLine()#deleteLine()<br>Deletes the last added line.
textfield.gettextcolor           = @getTextColor()#getTextColor():Color<br>Returns the color of the text.
textfield.gettextsize            = @getTextSize()#getTextSize():Number<br>Returns the size of the font.
textfield.getfont                = @getFont()#getFont():String<br>Return the font.
textfield.getalignmentvertical   = @getAlignmentVertical()#getAlignmentVertical():Alignment<br>Return the vertical alignment.
textfield.getautoadjustsize      = @getAutoAdjustSize()#getAutoAdjustSize():Boolean<br>Returns if the size of the rectangle is automatically adjusted.
textfield.getalignmenthorizontal = @getAlignmentHorizontal()#getAlignmentHorizontal():Alignment<br>Returns the horizontal alignment.
textfield.sethideborder          = @setHideBorder(hidden)#setHideBorder(hidden:Boolean)<br>Determines if the border of the rectangle should be hidden.
textfield.gethideborder          = @getHideBorder()#getHideBorder():Boolean<br>Returns if the border of the rectangle is hidden.
textfield.textcolor              = %textColor#textColor:Color<br>Color of the text.
textfield.textsize               = %textSize#textSize:Number<br>Size of the font.
textfield.font                   = %font#font:String<br>Font.
textfield.alignmentvertical      = %alignmentVertical#alignmentVertical:Alignment<br>Veritcal alignment of the text.
textfield.alignmenthorizontal    = %alignmentHorizontal#alignmentHorizontal:Alignment<br>Horizontal alignment of the text.
textfield.autoadjustsize         = %autoAdjustSize#autoAdjustSize:Boolean<br>Is the rectangle automatically adjusted to it's content?
textfield.hideborder             = %hideBorder#hideBorder:Boolean<br>Is the rectangle border hidden?
textfield.text                   = $text#text:Zeichenkette<br>Text.

grafic.loadimage    = @loadImage(filename)#loadImage(filename:String)<br>Loads the background image.
grafic.stretchimage = @stretchImage()#stretchImage()<br>The image will be stretch to the size of the rectangle, which violates its propoertions.
grafic.cutimage     = @cutImage()#cutImage()<br>The image will cover the rectangle completely, parts that are outside the rectangle will be cut off. 
grafic.fitimage     = @fitImage()#fitImage()<br>The image will be displayed as big as posible within the rectangle, some parts of the rectangle may not be covered.
grafic.mode         = $scaling#scaling:FillMode<br>Determines how the image will fill the rectangle. 
grafic.image        = $image#image:String<br>Name of the image file.

plotter.pendown        = @penDown()#penDown()<br>Starts drawing.
plotter.penup          = @penUp()#penUp()<br>Stops drawing.
plotter.turnleft       = @turnLeft(angle)#turnLeft(angle:Number)<br>Turns the pen to the left.
plotter.turnright      = @turnRight(angle)#turnRight(angle:Number)<br>Turns the pen to the right.
plotter.left           = @left(angle)#left(angle:Number)<br>Turns the pen to the left.
plotter.right          = @right(angle)#right(angle:Number)<br>Turns the pen to the right.
plotter.setpenxy       = @setPenXY(x,y)#setPenXY(x:Number,y:Number)<br>Moves the pen to that position.
plotter.back           = @back(abstand)#back(abstand:Number)<br>Moves the pen backwards.
plotter.forward        = @forward(abstand)#forward(abstand:Number)<br>Moves the pen forward.
plotter.setcolor       = @setColor(farbe)#setColor(farbe:Color)<br>Sets the drawing color.
plotter.getcolor       = @getColor()#getColor():Color<br>Returns the drawing color.
plotter.setpenx        = @setPenX(x)#setPenX(x:Number)<br>Sets the x coordinate of the pen.
plotter.getpenx        = @getPenX()#getPenX():Number<br>Returns the x coordinate of the pen.
plotter.setpeny        = @setPenY(y)#setPenY(y:Number)<br>Sets the y coordinate of the pen.
plotter.getpeny        = @getPenY()#getPenY():Number<br>Returns the y coordinate of the pen.
plotter.setcourse      = @setCourse(angle)#setCourse(angle:Number)<br>Sets the moving course of the pen.
plotter.getcourse      = @getCourse()#getCourse():Number<br>Returns the moving course of the pen.
plotter.setpenvisible  = @setPenVisible(visible)#setPenVisible(visible:Boolean)<br>Sets if the pen should be shown.
plotter.getpenvisible  = @getPenVisible()#getPenVisible():Boolean<br>Returns if the pen is shown.
plotter.setlinewidth   = @setLineWidth(width)#setLineWidth(width:Number)<br>Sets the width of the line that will be drawn.
plotter.setlinestyle   = @setLineStyle(style)#setLineStyle(style:LineStyle)<br>Sets the style of the line that will be drawn.
plotter.setfillstyle   = @setFillStyle(style)#setFillStyle(style:FillStyle)<br>Sets the style that is used to fill the drawn polygon.
plotter.setfillcolor   = @setFillColor(color)#setFillColor(color:Color)<br>Sets the color used to fill the drawn polygon
plotter.setcenter      = @setCenter(x,y)#setCenter(x:Number,y:Number)<br>Sets the center of the polygon group that is drawn without moving it.
plotter.clearall       = @clearAll()#clearAll()<br>Removes all drawn elements and starts a new drawing.
plotter.penx           = %penX#penX:Number<br>x coordinate of the pen.
plotter.peny           = %penY#penY:Number<br>y coordinate of the pen.
plotter.course         = %course#course:Number<br>Moving course of the pen.
plotter.penvisible     = %penVisible#penVisible:Boolean<br>Is the pen shown?
plotter.plotting       = $plotting#plotting:Boolean<br>Is the plotter drawing?
plotter.penColor       = $penColor#penColor:Color<br>Drawing color.

color.getgreen           = @getGreen()#getGreen():Number<br>The green share of the color 0 to 255.
color.getred             = @getRed()#getRed():Number<br>The red share of the color 0 to 255.
color.getblue            = @getBlue()#getBlue():Number<br>The blue share of the color 0 to 255.
color.getalpha           = @getAlpha()#getAlpha():Number<br>The alpha share of the color 0 to 255.
color.brighter           = @brighter()#brighter():Color<br>Creates a brighter color.
color.darker             = @darker()#darker():Color<br>Creates a darker color.
