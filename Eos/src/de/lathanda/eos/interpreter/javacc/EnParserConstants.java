/* Generated By:JavaCC: Do not edit this line. EnParserConstants.java */
package de.lathanda.eos.interpreter.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EnParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IMPORT = 1;
  /** RegularExpression Id. */
  int END_IMPORT = 2;
  /** RegularExpression Id. */
  int PROGRAM = 3;
  /** RegularExpression Id. */
  int END_PROGRAM = 4;
  /** RegularExpression Id. */
  int PROCEDURE = 5;
  /** RegularExpression Id. */
  int END_PROCEDURE = 6;
  /** RegularExpression Id. */
  int METHOD = 7;
  /** RegularExpression Id. */
  int END_METHOD = 8;
  /** RegularExpression Id. */
  int REPEAT = 9;
  /** RegularExpression Id. */
  int TIMES = 10;
  /** RegularExpression Id. */
  int FOREVER = 11;
  /** RegularExpression Id. */
  int UNTIL = 12;
  /** RegularExpression Id. */
  int END_REPEAT = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int THEN = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int END_IF = 17;
  /** RegularExpression Id. */
  int WITH = 18;
  /** RegularExpression Id. */
  int END_WITH = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int END_WHILE = 22;
  /** RegularExpression Id. */
  int TRUE = 23;
  /** RegularExpression Id. */
  int FALSE = 24;
  /** RegularExpression Id. */
  int RESULT = 25;
  /** RegularExpression Id. */
  int BREAKPOINT = 26;
  /** RegularExpression Id. */
  int STOP = 27;
  /** RegularExpression Id. */
  int LPAREN = 28;
  /** RegularExpression Id. */
  int RPAREN = 29;
  /** RegularExpression Id. */
  int SEMICOLON = 30;
  /** RegularExpression Id. */
  int COLON = 31;
  /** RegularExpression Id. */
  int SEPARATOR = 32;
  /** RegularExpression Id. */
  int DOT = 33;
  /** RegularExpression Id. */
  int ASSIGN = 34;
  /** RegularExpression Id. */
  int GT = 35;
  /** RegularExpression Id. */
  int LT = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int LE = 38;
  /** RegularExpression Id. */
  int GE = 39;
  /** RegularExpression Id. */
  int NE = 40;
  /** RegularExpression Id. */
  int OR = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int NOT = 43;
  /** RegularExpression Id. */
  int PLUS = 44;
  /** RegularExpression Id. */
  int MINUS = 45;
  /** RegularExpression Id. */
  int MULT = 46;
  /** RegularExpression Id. */
  int DIV = 47;
  /** RegularExpression Id. */
  int POW = 48;
  /** RegularExpression Id. */
  int YELLOW = 49;
  /** RegularExpression Id. */
  int RED = 50;
  /** RegularExpression Id. */
  int GREEN = 51;
  /** RegularExpression Id. */
  int BLUE = 52;
  /** RegularExpression Id. */
  int WHITE = 53;
  /** RegularExpression Id. */
  int BLACK = 54;
  /** RegularExpression Id. */
  int BROWN = 55;
  /** RegularExpression Id. */
  int LIGHT_BLUE = 56;
  /** RegularExpression Id. */
  int LIGHT_GREEN = 57;
  /** RegularExpression Id. */
  int GRAY = 58;
  /** RegularExpression Id. */
  int LIGHT_GRAY = 59;
  /** RegularExpression Id. */
  int DASHED = 60;
  /** RegularExpression Id. */
  int SOLID = 61;
  /** RegularExpression Id. */
  int DOTTED = 62;
  /** RegularExpression Id. */
  int DASHED_DOTTED = 63;
  /** RegularExpression Id. */
  int INVISIBLE = 64;
  /** RegularExpression Id. */
  int FILLED = 65;
  /** RegularExpression Id. */
  int SHADED = 66;
  /** RegularExpression Id. */
  int DARK_SHADED = 67;
  /** RegularExpression Id. */
  int TRANSPARENT = 68;
  /** RegularExpression Id. */
  int CENTER = 69;
  /** RegularExpression Id. */
  int LEFT = 70;
  /** RegularExpression Id. */
  int RIGHT = 71;
  /** RegularExpression Id. */
  int TOP = 72;
  /** RegularExpression Id. */
  int BOTTOM = 73;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 80;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 81;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT2 = 82;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 83;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 84;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 85;
  /** RegularExpression Id. */
  int EXPONENT = 86;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 87;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 88;
  /** RegularExpression Id. */
  int COLOR_LITERAL_RGB = 89;
  /** RegularExpression Id. */
  int COLOR_LITERAL_RGBA = 90;
  /** RegularExpression Id. */
  int IDENTIFIER = 91;
  /** RegularExpression Id. */
  int LETTER = 92;
  /** RegularExpression Id. */
  int DIGIT = 93;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"insert\"",
    "\"*insert\"",
    "\"program\"",
    "\"*program\"",
    "\"procedure\"",
    "\"*procedure\"",
    "\"method\"",
    "\"*method\"",
    "\"repeat\"",
    "\"times\"",
    "\"forever\"",
    "\"until\"",
    "\"*repeat\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"*if\"",
    "\"with\"",
    "\"*with\"",
    "\"while\"",
    "\"do\"",
    "\"*while\"",
    "\"true\"",
    "\"false\"",
    "\"result\"",
    "\"breakpoint\"",
    "\"stop\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\":=\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"yellow\"",
    "\"red\"",
    "\"green\"",
    "\"blue\"",
    "\"white\"",
    "\"black\"",
    "\"brown\"",
    "\"lightblue\"",
    "\"lightgreen\"",
    "\"grey\"",
    "\"lightgrey\"",
    "\"dashed\"",
    "\"solid\"",
    "\"dotted\"",
    "\"dasheddotted\"",
    "\"invisible\"",
    "\"filled\"",
    "\"ruled\"",
    "\"checked\"",
    "\"transparent\"",
    "\"centered\"",
    "\"leftaligned\"",
    "\"rightaligned\"",
    "\"topaligned\"",
    "\"bottomaligned\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\u00a0\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT2>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<COLOR_LITERAL_RGB>",
    "<COLOR_LITERAL_RGBA>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
