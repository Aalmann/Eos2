/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package de.lathanda.eos.interpreter.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IMPORT = 1;
  /** RegularExpression Id. */
  int END_IMPORT = 2;
  /** RegularExpression Id. */
  int PROGRAM = 3;
  /** RegularExpression Id. */
  int END_PROGRAM = 4;
  /** RegularExpression Id. */
  int PROCEDURE = 5;
  /** RegularExpression Id. */
  int END_PROCEDURE = 6;
  /** RegularExpression Id. */
  int METHOD = 7;
  /** RegularExpression Id. */
  int END_METHOD = 8;
  /** RegularExpression Id. */
  int REPEAT = 9;
  /** RegularExpression Id. */
  int TIMES = 10;
  /** RegularExpression Id. */
  int FOREVER = 11;
  /** RegularExpression Id. */
  int UNTIL = 12;
  /** RegularExpression Id. */
  int END_REPEAT = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int THEN = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int END_IF = 17;
  /** RegularExpression Id. */
  int WITH = 18;
  /** RegularExpression Id. */
  int END_WITH = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int END_WHILE = 22;
  /** RegularExpression Id. */
  int TRUE = 23;
  /** RegularExpression Id. */
  int FALSE = 24;
  /** RegularExpression Id. */
  int RESULT = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int SEMICOLON = 28;
  /** RegularExpression Id. */
  int COLON = 29;
  /** RegularExpression Id. */
  int SEPARATOR = 30;
  /** RegularExpression Id. */
  int DOT = 31;
  /** RegularExpression Id. */
  int ASSIGN = 32;
  /** RegularExpression Id. */
  int GT = 33;
  /** RegularExpression Id. */
  int LT = 34;
  /** RegularExpression Id. */
  int EQ = 35;
  /** RegularExpression Id. */
  int LE = 36;
  /** RegularExpression Id. */
  int GE = 37;
  /** RegularExpression Id. */
  int NE = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int PLUS = 42;
  /** RegularExpression Id. */
  int MINUS = 43;
  /** RegularExpression Id. */
  int MULT = 44;
  /** RegularExpression Id. */
  int DIV = 45;
  /** RegularExpression Id. */
  int POW = 46;
  /** RegularExpression Id. */
  int YELLOW = 47;
  /** RegularExpression Id. */
  int RED = 48;
  /** RegularExpression Id. */
  int GREEN = 49;
  /** RegularExpression Id. */
  int BLUE = 50;
  /** RegularExpression Id. */
  int WHITE = 51;
  /** RegularExpression Id. */
  int BLACK = 52;
  /** RegularExpression Id. */
  int BROWN = 53;
  /** RegularExpression Id. */
  int LIGHT_BLUE = 54;
  /** RegularExpression Id. */
  int LIGHT_GREEN = 55;
  /** RegularExpression Id. */
  int GRAY = 56;
  /** RegularExpression Id. */
  int LIGHT_GRAY = 57;
  /** RegularExpression Id. */
  int DASHED = 58;
  /** RegularExpression Id. */
  int SOLID = 59;
  /** RegularExpression Id. */
  int DOTTED = 60;
  /** RegularExpression Id. */
  int DASHED_DOTTED = 61;
  /** RegularExpression Id. */
  int INVISIBLE = 62;
  /** RegularExpression Id. */
  int FILLED = 63;
  /** RegularExpression Id. */
  int SHADED = 64;
  /** RegularExpression Id. */
  int DARK_SHADED = 65;
  /** RegularExpression Id. */
  int TRANSPARENT = 66;
  /** RegularExpression Id. */
  int CENTER = 67;
  /** RegularExpression Id. */
  int LEFT = 68;
  /** RegularExpression Id. */
  int RIGHT = 69;
  /** RegularExpression Id. */
  int TOP = 70;
  /** RegularExpression Id. */
  int BOTTOM = 71;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 78;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 79;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT2 = 80;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 81;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 82;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 83;
  /** RegularExpression Id. */
  int EXPONENT = 84;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 85;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 86;
  /** RegularExpression Id. */
  int COLOR_LITERAL_RGB = 87;
  /** RegularExpression Id. */
  int COLOR_LITERAL_RGBA = 88;
  /** RegularExpression Id. */
  int IDENTIFIER = 89;
  /** RegularExpression Id. */
  int LETTER = 90;
  /** RegularExpression Id. */
  int DIGIT = 91;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"einf\\u00fcgen\"",
    "\"*einf\\u00fcgen\"",
    "\"programm\"",
    "\"*programm\"",
    "\"anweisung\"",
    "\"*anweisung\"",
    "\"methode\"",
    "\"*methode\"",
    "\"wiederhole\"",
    "\"mal\"",
    "\"immer\"",
    "\"bis\"",
    "\"*wiederhole\"",
    "\"wenn\"",
    "\"dann\"",
    "\"sonst\"",
    "\"*wenn\"",
    "\"f\\u00fcr\"",
    "\"*f\\u00fcr\"",
    "\"solange\"",
    "\"tue\"",
    "\"*solange\"",
    "\"wahr\"",
    "\"falsch\"",
    "\"ergebnis\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\":=\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"oder\"",
    "\"und\"",
    "\"nicht\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"gelb\"",
    "\"rot\"",
    "\"gr\\u00fcn\"",
    "\"blau\"",
    "\"wei\\u00df\"",
    "\"schwarz\"",
    "\"braun\"",
    "\"hellblau\"",
    "\"hellgr\\u00fcn\"",
    "\"grau\"",
    "\"hellgrau\"",
    "\"gestrichelt\"",
    "\"durchgezogen\"",
    "\"gepunktelt\"",
    "\"gestrichpunktelt\"",
    "\"unsichtbar\"",
    "\"ausgemalt\"",
    "\"schraffiert\"",
    "\"kariert\"",
    "\"durchsichtig\"",
    "\"zentriert\"",
    "\"linksb\\u00fcndig\"",
    "\"rechtsb\\u00fcndig\"",
    "\"obenb\\u00fcndig\"",
    "\"untenb\\u00fcndig\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\u00a0\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT2>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<COLOR_LITERAL_RGB>",
    "<COLOR_LITERAL_RGBA>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
