/**
 * Copyright (c) 2015, Peter "Lathanda" Schneider
 * creative commons
 * Version 0.1
 *
 */
options {
  LOOKAHEAD              = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK  = 2;
  STATIC = false;
  DEBUG_PARSER        = false;
  DEBUG_LOOKAHEAD     = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING     = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT       = true;
  IGNORE_CASE         = true;
  USER_TOKEN_MANAGER  = false;
  USER_CHAR_STREAM    = true;
  BUILD_PARSER        = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK        = true;
  FORCE_LA_CHECK      = false;
  COMMON_TOKEN_ACTION = false;
  CACHE_TOKENS        = false;
  OUTPUT_DIRECTORY    = "../src/de/lathanda/assembler/interpreter/javacc";
}

PARSER_BEGIN(Parser)

package de.lathanda.assembler.interpreter.javacc;
import de.lathanda.assembler.interpreter.*; 
@SuppressWarnings("unused")
public class Parser {  
	Program program;
}


PARSER_END(Parser)

TOKEN_MGR_DECLS : {
}

/** reserved words */
TOKEN: 
{ 
  < DATA:        "data" >
| < CODE:        "code" >
| < R0:          "r0" >
| < R1:          "r1" >
| < R2:          "r2" >
| < R3:          "r3" >
| < R4:          "r4" >
| < R5:          "r5" >
| < R6:          "r6" >
| < R7:          "r7" >
| < R8:          "r8" >
| < R9:          "r9" >
| < R10:         "r10" >
| < R11:         "r11" >
| < R12:         "r12" >
| < R13:         "r13" >
| < R14:         "r14" >
| < R15:         "r15" >
| < A:           "a" >
| < B:           "b" >
}

/** separators */
TOKEN : 
{
  < LPAREN:    "(" >
| < RPAREN:    ")" >
| < COLON:     ":" >  
| < SEPARATOR: "," >
}

/** prefixes and postfixes */
TOKEN : 
{
  < INC:     "+" >
| < DEC:     "-" >
}

/** white spaces */
SKIP : 
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/** comments */
SPECIAL_TOKEN : 
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT2: "{" (~["}"])* "}">
}

/** Zahlen und Zeichenketten */
TOKEN : 
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < HEXADECIMAL_LITERAL: "0" "x" (["0"-"9"] | ["A"-"F"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","r","\\","\""]
            )
          )
      )*
      "\""
  >
}
/** Bezeichner */
TOKEN : 
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/** Produktionen */
void Parse(Program program ) :
{
  this.program = program;
}
{
	["data" (Data())*]
	"code" Instructions() |
	Instructions()
  <EOF>
}
void Data() :
{}
{
  Label() ":" DataValue() ("," DataValue())* 
}
void Instructions() :
{}
{

  (LOOKAHEAD(<IDENTIFIER> ":") Label() ":" |
  OpcodeOrLabel() |
  Param() )*
}
void Label() :
{Token id = null;}
{
  id = <IDENTIFIER> {program.pushLabel(id.image);}
}
void OpcodeOrLabel() :
{Token id = null;}
{
  id = <IDENTIFIER> {program.pushOpcodeOrLabel(id.image);}
}
void Param() :
{Register r = null; Token value;}
{
  r = Register() {program.pushRegister(r);} |
  "(" r = Register() ")" {program.pushIndirectRegister(r);} ["+" {program.pushInc();}]  |
  "-" "(" r = Register() ")" {program.pushIndirectRegister(r); program.pushDec();}
  r = Register() {program.pushRegister(r);} "," r = Register() {program.pushIndexRegister(r);}  |
  (value = <INTEGER_LITERAL> { program.pushInt(Integer.parseInt(value.image));}|
  value = <HEXADECIMAL_LITERAL> {program.pushInt(Integer.parseInt(value.image, 16));} ) |
  value = <FLOATING_POINT_LITERAL> {program.pushFloat(Float.floatToIntBits(Float.parseFloat(value.image)));}      
}
 
Register Register() :
{Register r = null;}
{
	("r0" {r = Register.R0;}  |
	"r1" {r = Register.R1;}  |
	"r2" {r = Register.R2;}  |
	"r3" {r = Register.R3;}  |
	"r4" {r = Register.R4;}  |
	"r5" {r = Register.R5;}  |
	"r6" {r = Register.R6;}  |
	"r7" {r = Register.R7;}  |
	"r8" {r = Register.R8;}  |
	"r9" {r = Register.R9;}  |
	"r10" {r = Register.R10;} |
	"r11" {r = Register.R11;} |
	"r12" {r = Register.R12;} |
	"r13" {r = Register.R13;} |
	"r14" {r = Register.R14;} |
	"r15" {r = Register.R15;} |
	"a" {r = Register.A;} |
	"b" {r = Register.B;})
	{return r;}
} 
void DataValue() :
{}
{
  <INTEGER_LITERAL> |
  TextRaw() |
  <HEXADECIMAL_LITERAL> |
  <FLOATING_POINT_LITERAL>
}
String TextRaw() : 
{Token t; String text; }
{
  (
  t = <STRING_LITERAL>
  )
  {
    text = t.image;
    text = text.replace("\\n", "\n")
      .replace("\\t", "\t")
      .replace("\\n", "\n")
      .replace("\\r", "\r")
      .replace("\\\'", "\'")
      .replace("\\\\", "\\");
    return text.substring(1, text.length() - 1);
  }
}
Integer IntNumber() :
{Token number;}
{
  number = <INTEGER_LITERAL>
  {
    try {
      return new Integer(number.image);
    } catch (NumberFormatException nfe) {
      //shouldn't be possible, crash if it does
      nfe.printStackTrace();
      System.exit(-1);
    }
  }
}

Float FloatNumber() :
{Token number;}
{
  number = <FLOATING_POINT_LITERAL>
  {
    try {     
      return new Float(number.image);
    } catch (NumberFormatException nfe) {
      //shouldn't be possible, crash if it does
      nfe.printStackTrace();
      System.exit(-1);
    }
  }
}