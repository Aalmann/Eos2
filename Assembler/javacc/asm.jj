/**
 * Copyright (c) 2015, Peter "Lathanda" Schneider
 * creative commons
 * Version 0.1
 *
 */
options {
  LOOKAHEAD              = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK  = 2;
  STATIC = false;
  DEBUG_PARSER        = false;
  DEBUG_LOOKAHEAD     = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING     = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT       = true;
  IGNORE_CASE         = true;
  USER_TOKEN_MANAGER  = false;
  USER_CHAR_STREAM    = true;
  BUILD_PARSER        = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK        = true;
  FORCE_LA_CHECK      = false;
  COMMON_TOKEN_ACTION = true;
  CACHE_TOKENS        = false;
  OUTPUT_DIRECTORY    = "../../src/de/lathanda/asm/interpreter/javacc";
}

PARSER_BEGIN(Parser)

package de.lathanda.asm.interpreter.javacc;
@SuppressWarnings("unused")
public class Parser {  
	Program program;
}


PARSER_END(Parser)

TOKEN_MGR_DECLS : {
}

/** reserved words */
TOKEN: 
{ 
  < DATA:        "data" >
| < CODE:        "code" >
}

/** separators */
TOKEN : 
{
  < LPAREN:    "(" >
| < RPAREN:    ")" >
| < COLON:     ":" >  
| < SEPARATOR: "," >
}

/** prefixes and postfixes */
TOKEN : 
{
  < NUMBER:  "#" >
| < ADDRESS: "$" >
| < INC:     "+" >
| < DEC:     "-" >
}

/** white spaces */
SKIP : 
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/** comments */
SPECIAL_TOKEN : 
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT2: "{" (~["}"])* "}">
}

/** Zahlen und Zeichenketten */
TOKEN : 
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | (["0"-"9"])+ (<EXPONENT>)?
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL1:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","r","\\","\""]
            )
          )
      )*
      "\""
  >
|  < STRING_LITERAL2:
      "\'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","r","\\","\'"]
            )
          )
      )*
      "\'"
  >
}
/** Bezeichner */
TOKEN : 
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/** Produktionen */
void Parse(Program program ) :
{
  this.program = program;
}
{
	["data" (Data())*]
	"code" (Instruction())* |
	(Instruction())*
  <EOF>
}
void Data() :
{}
{
  Label() ":" Value() ("," (Value())* 
}
void Instruction() :
{}
{
  [Label() ":"] Opcode() [Param()["," Param()]]
}
void Label() :
{}
{
  <IDENTIFIER>
}
void Opcode() :
{}
{
  <IDENTIFIER>
}
void Param() {
  <IDENTIFIER>
}
String TextRaw() : 
{Token t; String text; }
{
  (
  t = <STRING_LITERAL1> |
  t = <STRING_LITERAL2>
  )
  {
    text = t.image;
    text = text.replace("\\n", "\n")
      .replace("\\t", "\t")
      .replace("\\n", "\n")
      .replace("\\r", "\r")
      .replace("\\\'", "\'")
      .replace("\\\\", "\\");
    return text.substring(1, text.length() - 1);
  }
}
Constant IntNumber() :
{Token number;}
{
  number = <INTEGER_LITERAL>
  {
    try {
      return new Constant(new Integer(number.image), Type.INTEGER, number.image);
    } catch (NumberFormatException nfe) {
      //shouldn't be possible, crash if it does
      nfe.printStackTrace();
      System.exit(-1);
    }
  }
}

Constant FloatNumber() :
{Token number;}
{
  number = <FLOATING_POINT_LITERAL>
  {
    try {     
      return new Constant(new Double(number.image), Type.DOUBLE, number.image);
    } catch (NumberFormatException nfe) {
      //shouldn't be possible, crash if it does
      nfe.printStackTrace();
      System.exit(-1);
    }
  }
}