/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package de.lathanda.assembler.interpreter.javacc;
import de.lathanda.assembler.interpreter.*;
@SuppressWarnings("unused")
public class Parser implements ParserConstants {
        Program program;

/** Produktionen */
  final public void Parse(Program program) throws ParseException {this.program = program;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:
    case CODE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DATA:{
        jj_consume_token(DATA);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Data();
        }
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(CODE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        Instruction();
      }
      break;
      }
    case 0:
    case IDENTIFIER:{
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        Instruction();
      }
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Data() throws ParseException {
    Label();
    jj_consume_token(COLON);
    Value();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(SEPARATOR);
      Value();
    }
  }

  final public void Instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Label();
      jj_consume_token(COLON);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    Opcode();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Param();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARATOR:{
        jj_consume_token(SEPARATOR);
        Param();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void Label() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void Opcode() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void Param() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      TextRaw();
      break;
      }
    case ADDRESS:{
      jj_consume_token(ADDRESS);
      jj_consume_token(HEXADECIMAL_LITERAL);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String TextRaw() throws ParseException {Token t; String text;
    t = jj_consume_token(STRING_LITERAL);
text = t.image;
    text = text.replace("\u005c\u005cn", "\u005cn")
      .replace("\u005c\u005ct", "\u005ct")
      .replace("\u005c\u005cn", "\u005cn")
      .replace("\u005c\u005cr", "\u005cr")
      .replace("\u005c\u005c\u005c'", "\u005c'")
      .replace("\u005c\u005c\u005c\u005c", "\u005c\u005c");
    {if ("" != null) return text.substring(1, text.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  final public Integer IntNumber() throws ParseException {Token number;
    number = jj_consume_token(INTEGER_LITERAL);
try {
      {if ("" != null) return new Integer(number.image);}
    } catch (NumberFormatException nfe) {
      //shouldn't be possible, crash if it does
      nfe.printStackTrace();
      System.exit(-1);
    }
    throw new Error("Missing return statement in function");
  }

  final public Float FloatNumber() throws ParseException {Token number;
    number = jj_consume_token(FLOATING_POINT_LITERAL);
try {
      {if ("" != null) return new Float(number.image);}
    } catch (NumberFormatException nfe) {
      //shouldn't be possible, crash if it does
      nfe.printStackTrace();
      System.exit(-1);
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x2,0x2000000,0x2000000,0x2000007,0x40,0x2000000,0x40,0x2000000,0x1480100,};
   }

  /** Constructor with user supplied CharStream. */
  public Parser(CharStream stream) {
    token_source = new ParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
